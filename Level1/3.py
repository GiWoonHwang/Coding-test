# 행렬의 덧셈

# 문제 설명
# 행렬의 덧셈은 행과 열의 크기가 같은 두 행렬의 같은 행, 같은 열의 값을 서로 더한 결과가 됩니다. 2개의 행렬 arr1과 arr2를 입력받아, 행렬 덧셈의 결괄르 반환하는 함수, soulution을 완성해 주세요

# 제한조건
# 행렬 aar1, arr2의 행과 열의 길이는 500을 넘지 않습니다.

# 입출력 예
# arr1   arr2   return
# [[1,2],[2,3]] [[3,4],[5,6]] [[4,6],[7,9]]

# 풀이
# 1. zip() 함수를 사용한다. zip() 함수는 여러 개의 순회 가능한 객체를 인자로 받고, 각 개체가 담고 있는 원소를 터플의 형태로 차례로 접근 할 수 있는 반복자(iterator)를 반환한다.
# ex) number = [1,2,3]
#     lectters = ['a','b','c']
#     for a in zip(number,lectters):
#         print(a)
# (1,'a')
# (2,'b')
# (3,'c')

# 2. 배열을 출력해야 하기 때문에 반복문을 []으로 감싸준다.

# 3. 함수와 반복문, 그리고 zip함수를 이용한다

# 4. def arrsum(a,b):  # ex) a = [[1,2],[3,4]] b = [[5,6],[7,8]]
#    return [[c + d for c,d  in zip(a,b)]]
# print(arrsum([[1,2],[3,4]],[[5,6],[7,8]])) 
# => [[1,2,5,6],[3,4,7,8]] 출력

5. def arrsum(A,B):
   return [[d for d  in zip(a,b)] for a,b in zip(A,B)]

print(arrsum([[1,2],[3,4]],[[5,6],[7,8]])) 

[c for in zip(A,B)] = > [[([1, 2], [5, 6]), ([3, 4], [7, 8])]] = > for문을 한번만 사용 했을 떄 출력 값

[[c for in zip(a,b)]for a,b in zip(A,B)]] = > [[(1, 5), (2, 6)], [(3, 7), (4, 8)]] => for 문을 두번 사용 했을 때 출력 값

# 6.def arrsum(A,B):  # ex) a = [[1,2],[3,4]] b = [[5,6],[7,8]]
#    return [[c + d for c,d  in zip(a,b)] for a,b in zip(A,B)]
# print(arrsum([[1,2],[3,4]],[[5,6],[7,8]]))  => for문을 두번 사용하니 원하는 결과 값 출력
