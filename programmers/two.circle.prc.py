'''
r1 = 2,  r2 = 3

1. (x^2 + y^2  = r^2)  =>  (y^2 = r^2 - x^2) x축이 특정 값 일떄, y축의 값을 알 수 있다.

2. 하나의 사분면에 대한 정수점 개수를 구한 후 * 4를 해준다. 이떄, x축과 y축 위의 점들 중 한쪽만 포함시켜야 한다. (모든 사분면에 해당하기 때문)

3. 첫 번째 반복문: 0 ~ r-1까지 x값에 대해 y값의 개수를 구한 후 두 원 사이의 점의 개수를 구함

    * 두원 사이의 점의 개수 = 반지름이 r2인 원의 점의 개수  - 반지름이 r1인 원의 점의 개수 

    * 교점이 정수인 경우 ex) (0,3), (0,2) 점의 개수는 2개 이므로 원의 표먼까지 계산하기 위해 -1을 해줌

    * 반복문에서 교점이 정수가 아닌 경우에도 -1을 하는 이유: int() 함수로 내림처리하기 때문에 제곱근에서 -1을 해도 영향을 받지 않는다.
       ex) i = 1인 경우  int(sqrt(r2**2 - i**2)) = 2.8....., int(sqrt(r1**2 - i**2 - 1)) = 1.414...    -> 2 -1 = 1 실제 이 구간에서 좌표의 개수도 1 이다.
    
4. 두 반복문에서 각각 r1, r2값을 포함하지 않는 이유

    * 첫 번째 반복문에서는 r1원 내부의 점을 구함 (표면은 바깥영역으로 취급된다)
    * 두 번째 반복문은 r1원의 바깥부터 r2원의 내부까지 영역의 좌표를 구함
    * 만약 두 번째 반복문에서 r2까지 포함한다면,  모든 사분면에 해당하는 좌표를 한번 더 계산하게 된다. (이미 i =0일때 계산함)
'''

from math import sqrt

def solution(r1,r2):
    answer = 0

    # r1원의 내부가 포함된 x좌표에서의 점의 개수
    for i in range(0,r1):
        answer += int(sqrt(r2**2 - i**2))  - int(sqrt(r1**2 - i**2 -1))

    # r2원의 바깥부터 r2내부 까지의 x좌표에서의 점의 개수
    for i in range(r1,r2):
        answer += int(sqrt(r2**2 - i**2)) 
    
    return answer * 4
