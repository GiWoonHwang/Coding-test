# 줄 서는 방법
'''
문제 설명
n명의 사람이 일렬로 줄을 서고 있습니다. n명의 사람들에게는 각각 1번부터 n번까지 번호가 매겨져 있습니다. n명이 사람을 줄을 서는 방법은 여러가지 방법이 있습니다. 예를 들어서 3명의 사람이 있다면 다음과 같이 6개의 방법이 있습니다.

[1, 2, 3]
[1, 3, 2]
[2, 1, 3]
[2, 3, 1]
[3, 1, 2]
[3, 2, 1]
사람의 수 n과, 자연수 k가 주어질 때, 사람을 나열 하는 방법을 사전 순으로 나열 했을 때, k번째 방법을 return하는 solution 함수를 완성해주세요.

제한사항
n은 20이하의 자연수 입니다.
k는 n! 이하의 자연수 입니다.
입출력 예
n	k	result
3	5	[3,1,2]
입출력 예시 설명
입출력 예 #1
문제의 예시와 같습니다.

'''

''' 
풀이
문제에 예시에 있듯이 [1,2,3] 이라는 사람들이 있으면 줄 설 수 있는 방법은 3 x 2 x 1로 6개이다. 이는 팩토리얼로 구할 수 있다. python의 math에는 factorial 함수가 들어있다.
거기에 현재의 숫자를 나누면 각 숫자가 첫번째에 왔을 때 몇 번의 방법이 있는지 알 수 있다. 6 // 3을 하면 2가 된다. 즉, [1,2,3][1,3,2] [2,1,3][2,3,1] [3,1,2][3,2,1]로 각 숫자당 2개의 방법이 생긴다.

index는 우리가 신경써야할 기준이라 볼 수 있다. k번째를 구해야하니 k // temp를 했을 때의 값을 index로 저장하고, k % temp가 0이면 딱 맞아 떨어진 것이니, index-1을 answer에 넣어주면된다. 아닐 경우 index번째를 넣어준다.
위 경우 index = 5 // 2 = 2가 된다. k = k % 2를 하면 5 % 2 = 1이 된다. 즉 2번 지나가고 1이 남은 것이다. 그럼 3번째 것의 1번째가 답이 된다는 것을 알 수 있다. 그러므로 3을 넣어주기 위해 index가 2이므로 numberList.pop(index)를 하면 3이 들어가게된다.

이제 이걸 반복해주면 된다. n이 1 줄어들면 2가 되고, temp = 2 // 2가 되어 1이 된다. index = 1 // 1 이라 1이 된다. k = 1이 된다. 이제 answer에 index -1 즉 0번째를 넣어주면 1이 들어간다. n - 1 을 하면 n 은 1 이된다.

마지막으로 temp = 1, index = 1 // 1이므로 1이 되고 k = 1 %1이라 0이되어 첫번째 원소를 넣어주면 [3, 1, 2]가 된다.

'''

n = 3
k = 5


# 2022-08-26 기준 이해못함
import math

def solution(n, k):
    answer = []
    numberList = [i for i in range(1, n+1)]
    while (n != 0):
        temp = math.factorial(n) // n # 한개에 몇개씩의 값이 있을지 알 수 잇음.
        index = k // temp
        k = k % temp
        if k == 0:
            answer.append(numberList.pop(index-1))
        else :
             answer.append(numberList.pop(index))

        n -= 1
    
    return answer