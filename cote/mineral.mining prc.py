'''
피로도 높은 그룹에 다이아 곡괭이를 매핑시킨다 == 높은 그룹이 나오기 전에는 다이아말고 다른 곡괭이를 우선으로 쓴다 이거임 ?
ChatGPT
아, 이제 제가 설명하려던 포인트를 더 명확히 이해하신 것 같네요. 정확히 말씀하셨습니다. 문제 해결 전략에서 "피로도가 높은 그룹에 다이아몬드 곡괭이를 매핑시킨다"는 것은, 주어진 광물의 순서 내에서 특정 구간(또는 그룹)이 다른 곡괭이로 캘 때 비해 상대적으로 높은 피로도를 발생시키는 경우, 그 구간에 대해서는 다이아몬드 곡괭이를 사용하여 총 피로도를 최소화하려는 전략을 말합니다. 이는 동시에, 그런 높은 피로도 그룹이 나오기 전에는 다이아몬드 곡괭이를 아껴 두고, 가능한 한 다이아몬드 곡괭이의 사용을 미루면서 철 곡괭이나 돌 곡괭이를 우선 사용하는 전략을 의미합니다.

이 전략의 핵심은 각 곡괭이를 언제 사용할지를 전략적으로 결정하는 것입니다. 특히, 피로도가 높아질 것으로 예상되는 광물 그룹에 다이아몬드 곡괭이를 할당함으로써, 전체 작업을 통틀어 피로도를 가능한 한 낮출 수 있습니다.

예를 들어, 만약 첫 번째 광물 그룹이 ["iron", "iron", "stone", "stone", "stone"]로 구성되어 있고, 두 번째 그룹이 ["diamond", "diamond", "diamond", "diamond", "diamond"]로 구성되어 있다면, 첫 번째 그룹은 철 곡괭이나 돌 곡괭이로 캐는 것이 상대적으로 낮은 피로도를 발생시킵니다. 그래서 첫 번째 그룹에는 다이아몬드 곡괭이를 사용하지 않고, 두 번째 그룹에서 상대적으로 높은 피로도를 발생시키는 다이아몬드 광물을 캐기 위해 다이아몬드 곡괭이를 사용하는 것이 전략적으로 유리합니다.

이러한 전략은 마인이 가진 곡괭이의 수와 각 광물 그룹을 캘 때 발생하는 피로도를 종합적으로 고려해야 하며, 효율적인 곡괭이 사용 계획을 세우기 위한 기반을 제공합니다.
'''


# 광물을 5개씩 그룹화
# 각 그룹에 대한 곡갱이별 피로도 계산

def solution(picks, minerals):

    # 광물을 5개씩 정렬, 곡괭이 합 * 5 vs 광물 수 중 적은것으로 선택한다.
    # 곡괭이가 아무리 많아도 광물이 적으면 캘 수 있는 최대 개수는 광물의 수 뿐이니까
    minerals = [list(minerals[i:i+5]) for i in range(0,min(sum(picks))*5, len(minerals),5)]
    req = []

    # 광물 그룹에 대한 곡괭이별 피로도 계산
    for bundle in minerals:
        tmp = [0,0,0]
        for i in bundle:
            tmp[0] += 1
            tmp[1] += 5 if i == "diamond" else 1
            tmp[2] += 25 if i == "diamond" else 5 if i == "iron" else  1
        req.append(tmp)


    req.sort(key=lambda x: (-x[2], -x[1]))

    ans = 0

    # 곡괭이 사용 후 곡괭이에 따른 피로도를 누적 더해주고 곡괭이 개수 차감
    for score in req:
        if picks[0]:
            ans += score[0]
            picks[0] -= 1
        elif picks[1]:
            ans += score[1]
            picks[1] -= 1
        elif picks[2]:
            ans += score[2]
            picks[0] -= 1
        else:
            break
    return ans


    



