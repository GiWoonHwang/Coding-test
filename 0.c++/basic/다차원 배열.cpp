/*
다차원 배열이란 2차원 이상의 배열을 의미하며, 배열 요소로 또 다른 배열을 가지는 배열을 의미한다.
즉 2차원 배열은 배열 요소로 1차원 배열을 가지면 배열이며, 3차원 배열은 배열 요소로 2차원 배열을 가지는 배열이고,
4배차원 배열은 배열 요소로 3차원 배열을 가지는 배열인 것

2차원 배열
2차원 배열이란 배열 요소로 1차원 배열을 가지는 배열이다.
cpp에서는 2차원 배열을 나타내는 타입을 따로 제공하지 않는다.
대신에 1차원 배열의 배열요소로 또 다른 1차원 배열을 사용하여 2차원 배열을 나타낼 수 있습니다.

타입 배열이름[행의길이][열의길이]
타입은 배열 요소로 저장되는 변수의 타입을 설정합니다.
배열 이름은 배열이 선언된 후에 배열에 접근하기 위해 사용된다.

1차원 배열의 초기화 형태를 따르는 형식
타입 배열이름[행의길이][열의길이] = {배열요소[0][0], 배열요소[0][1], .... 배열요소[1][0], 배열요소[1][1]...}
이 방식으로는 2차원 배열의 요소를[0][0]부터 차례대로 초기화 한다. 만약 초기화 하는 배열 요소의 개수가 배열의 총 길이보다 작으면, 나머지 배열 요소는 모두 0으로 초기화 된다.

직관적으로 초기화 하는 방식
타입 배열이름[행의길이][열의길이]{
    {배열요소[0][0],배열요소[0][1]...},
    {배열요소[1][0],배열요소[1][1]...},
    {배열요소[2][0],배열요소[2][1]...}
}
이 방식은 앞서 살펴본 1차원 배열의 초기화 형태를 따르는 방식과 결과는 같지만 좀더 직관적으로 2차원 배열의 모습을 알 수 있으므로, 보통 이 방식을 많이 사용한다.
*/

#include <iostream>
#include <iomanip>

using namespace std;

int main(){

    int arr_col_len, arr_row_len;
    int arr[3][4] = {
        {10,20},
        {30,40,50,60},
        {0,0,70,80}
    };
    arr_col_len = sizeof(arr[0]) / sizeof(arr[0][0]); // 2차원 배열의 열의 길이를 계산
    arr_row_len = (sizeof(arr) / arr_col_len) / sizeof(arr[0][0]); // 2차원 배열의 행의 길이를 계산

    cout << "arr의 배열 요소의 값 " << endl;
    for(int i = 0; i < arr_row_len; i ++){
        for(int j = 0; j< arr_col_len; j ++){
            cout << setw(4) << arr[i][j];
        }
        cout << endl;
    } 
    return 1;
}